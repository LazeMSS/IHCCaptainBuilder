name: "💾 Build IHC Captain RPI image"
env:
  outputimgname: "captain.img"
on:
  workflow_dispatch:
    inputs:
      input_image:
        description: "The base image to use as input for CustoPiZer"
        required: true
        default: "https://downloads.raspberrypi.org/raspios_lite_armhf_latest"
      extrainstallparam:
        description: "Extra installer parameters"
        default: ""
      buildbetaimg:
        description: "Build beta image?"
        default: false
        required: true
        type: boolean
jobs:
  build:
    name: "💾 Build IHC Captain RPI image"
    runs-on: ubuntu-latest
    steps:
      - name: "👶 Set img output name"
        run: |
          touch "./hest.bin"
      - name: "upload files"
        uses: Dylan700/sftp-upload-action@latest
        with:
          server: sftp.jemi.dk
          username: jemi.dk
          password: ${{secrets.SFTPPASS}}
          port: 22
          uploads: |
             ./test.bin => test.bin

      - name: "👶 Set img output name"
        run: |
          if "${{ inputs.buildbetaimg }}" == "true"; then
            echo "outputimgname=captain-beta.img" >> $GITHUB_ENV
            exit 0
          fi

          # find tag and check if numeric/float
          releaseTag=${GITHUB_REF##*/}
          
          # Tag it
          if [[ $releaseTag =~ ^[+-]?[0-9]+\.?[0-9]*$ ]]; then
            releaseTag="-${releaseTag}"
          else
            releaseTag="-notTagged"
          fi
          
          echo "outputimgname=captain${releaseTag}.img" >> $GITHUB_ENV

      - name: "🔍 Show variables for build"
        run: |
          # Debug out
          echo "🟢 Raspberry Pi OS            : ${{ inputs.input_image }}"
          echo "🟢 Extra installer parameters : ${{ inputs.extrainstallparam }}"
          echo "🟢 Beta build                 : ${{ inputs.buildbetaimg }}"
          echo "🟢 Output filename            : $outputimgname"
          echo "🟢 Tag                        : ${GITHUB_REF##*/}"
      
      - name: "🛒 Checkout basic repo and set name"
        uses: actions/checkout@v4

      - name: "🔎 Find MD5 of Raspberry Pi os image URL"
        run: |
          echo dlmd5file="$(echo -n "${{ github.event.inputs.input_image }}" | md5sum | cut -b1-32)" >> "$GITHUB_ENV"

      - name: "📂 Is the Raspberry Pi OS image cached"
        id: file-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-name
        with:
          path: ./cache
          key: ${{ env.dlmd5file }}
      
      - if: ${{ steps.file-cache.outputs.cache-hit != 'true' }}
        name: "📥 Download file"
        run: |
          filename=$(basename "${{ github.event.inputs.input_image }}")
          # Using the symlink for the latest lets lookup the real filename redirect
          if [ "$filename" == "raspios_lite_armhf_latest" ]; then
            filename=$(wget -O /dev/null -o - --max-redirect=0 https://downloads.raspberrypi.org/raspios_lite_armhf_latest 2>/dev/null| sed -n "s/^Location: \(.*\) \[following\]$/\1/p")
            echo "Latest raspios resolved to: $filename"
          fi
          fileext="${filename##*.}"
          output="image.$fileext"
          
          echo "Trying to download $filename into build/$output"
          curl -q --no-progress-meter -L -f ${{ github.event.inputs.input_image }} -o "$output"
          retVal=$?
          if [ $retVal -ne 0 ]; then
              echo "Curl failed to download: ${{ github.event.inputs.input_image }}"
              exit $retVal
          fi
          
          # unpack and store
          if [ "$fileext" == "xz" ]; then
            echo "xz archive found"
            xz -d "$output"
            mv image dlimg.img
          else      
            echo "Assuming zip archive"
            unzip -q "$output"
            rm "$output"
            IMAGE=$(ls *.img | head -n 1)
            mv "$IMAGE" dlimg.img
          fi
          
          # store in cache
          mkdir -p cache
          cp dlimg.img "cache/${{ env.dlmd5file }}"
          echo "🚀 ${{ github.event.inputs.input_image }} downloaded into cache/${{ env.dlmd5file }}"

      - name: "🚚 Move from cache to build folder"
        run: |
          mkdir -p build
          cp "cache/${{ env.dlmd5file }}" build/input.img

      - name: "🏃 Run CustoPiZer to build image and install IHC Captain"
        uses: OctoPrint/CustoPiZer@main
        with:
          workspace: '${{ github.workspace }}/build'
          scripts: '${{ github.workspace }}/scripts'
          environment: '{ "INSIDEGITHUB": "true", "XTRABUILDPARAM": "${{ github.event.inputs.extrainstallparam }}", "BUILDBETAIMG": "${{ github.event.inputs.buildbetaimg }}" }'
          config: '${{ github.workspace }}/config.local'

      - name: "✏️ Rename the output file"
        run: |
          mv ${{ github.workspace }}/build/output.img ${{ github.workspace }}/build/$outputimgname
        
      - name: "⏫ Upload Artifact"
        uses: actions/upload-artifact@v4
        with: 
          name: ${{ env.outputimgname }}
          compression-level: 7
          retention-days: 30
          path: ${{ github.workspace }}/build/${{ env.outputimgname }}

      - name: "🧹 Cleanup"
        if: always()
        run: |
          rm -f build/input.img
          rm -f build/output.img
          rm -f build/$outputimgname
        
      - name: "📰 Summary"
        run: |
          echo "- Raspberry Pi OS: ${{ inputs.input_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- Extra installer parameters: ${{ inputs.extrainstallparam }}" >> $GITHUB_STEP_SUMMARY
          echo "- Beta build: ${{ inputs.buildbetaimg }}" >> $GITHUB_STEP_SUMMARY
          echo "- Output filename: $outputimgname" >> $GITHUB_STEP_SUMMARY
          echo "- Tag: ${GITHUB_REF##*/}" >> $GITHUB_STEP_SUMMARY
