name: "üõ†Ô∏è CustoPiZe"
on:
  workflow_dispatch:
    inputs:
      input_image:
        description: "The base image to use as input for CustoPiZer"
        required: true
        default: "https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2023-02-22/2023-02-21-raspios-bullseye-armhf-lite.img.xz"

jobs:
  init:
    name: "üì¶ Build custom image..."
    runs-on: ubuntu-latest
    steps:
      - name: "üõí Checkout basic repo"
        uses: actions/checkout@v3

      - name: "üå¥ Find md5sum"
        run: |
          echo dlmd5file="$(echo -n "${{ github.event.inputs.input_image }}" | md5sum | awk '{print $1}')" >> "$GITHUB_ENV"

      - name: "üíæ Check if file is cached"
        id: file-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-name
        with:
          path: ./cache
          key: ${{ env.dlmd5file }}
      
      - if: ${{ steps.file-cache.outputs.cache-hit != 'true' }}
        name: "‚è¨ Download the file"
        run: |
          filename=$(basename "${{ github.event.inputs.input_image }}")
          fileext="${filename##*.}"
          output="image.$fileext"
          
          echo "Downloading $filename into build/$output"
          curl -q --no-progress-meter -L -o "$output" ${{ github.event.inputs.input_image }}

          # unpack and store
          if [ "$fileext" == "xz" ]; then
            echo "xz archive found..."
            xz -d "$output"
            mv image dlimg.img
          else      
            echo "Assuming zip archive..."
            unzip -q "$output"
            rm "$output"
            IMAGE=$(ls *.img | head -n 1)
            mv "$IMAGE" dlimg.img
          fi
          
          # store in cache
          mkdir -p cache
          cp dlimg.img "cache/${{ env.dlmd5file }}"
          echo "üöÄ ${{ github.event.inputs.input_image }} downloaded into cache/${{ env.dlmd5file }}"

      - name: "Move img from cache to build folder"
        run: |
          mkdir -p build
          pwd
          ls -l
          ls build
          cp "cache/${{ env.dlmd5file }}" build/input.img
          ls cache -l
          ls build

      - name: "üèÉ Run CustoPiZer"
        uses: OctoPrint/CustoPiZer@main
        with:
          workspace: '${{ github.workspace }}/build'
          config: '${{ github.workspace }}/config.local'
          scripts: '${{ github.workspace }}/scripts'
          environment: '{ "INSIDEGITHUB": "true" }'

      - name: "üß∞ Package the image"
        uses: OctoPrint/actions/package-rpi-image@main
        id: package-image
        with:
          image_path: '${{ github.workspace }}/build/output.img'

      - name: "‚è´ Upload Artifact"
        uses: actions/upload-artifact@v3
        with: 
          name: "image.zip"
          path: ${{ github.workspace }}/build/${{ steps.package-image.outputs.zip_name }}
          
      - name: "Cleanup"
        run: |
              rm build/input.img

